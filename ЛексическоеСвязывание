12.10.3 Лексический Binding

Лексическое связывание было введено в Emacs, в качестве дополнительной функции, в версии 24.1.Мы ожидаем,
что его важность возрастает со временем. Лексическое связывание открывает много возможностей больше для
оптимизации, так что программы, использующих его, скорее всего, станут работать быстрее в будущих
версиях Emacs. Лексическое связывание также является более совместимо с параллелизмои, который был
добавлен к Emacs в версии 26.1.

Лексически-связанная переменная имеет лексическую область, а это означает, что любая ссылка на переменную
должна быть расположена в пределах текстуально связывания конструкции. Вот пример
(см Использование лексических Binding, о том, как на самом деле включить лексический связывание):

     (let ((x 1))    ; х лексически связана.
       (+ x 3))
          ⇒ 4
     
     (defun getx ()
       x)            ; х используется свободно в этой функции.
     
     (let ((x 1))    ; х лексически связана.
       (getx))
     error--> Symbol's value as variable is void: x

Здесь переменная х не имеет глобального значения. Когда лексически связана в форме, оан может быть использован в текстовых пределах, которые позволяют форме. Она не может быть использовано из функции getx вызванной из данной формы,
так как определение функции getx происходит вне связывания данной формы.

Вот как  работает лексикческое связывание. Каждая конструкция связывания определяет лексическую среду, с указанием
переменных и их привязки к их локальным значениям. Когда оценщик Лисп получает текущее значение переменной, он
вначале ищет его в лексической среде; если переменная не указана там, исчет в ячейке значение символа, в котором
хранится значение динамического связывания.

(Внутренне, лексическая среда является ассоциативным списком пара символов-значения, с конечным элементом в ALIST,
являющийся символ t, а не cons cell. Такой ассоциативный список может быть передан в качестве второго аргумента в
функцию Eval, чтобы указать лексическую среду, в которой нужно оценить форму. См Eval. Большинство программ
Emacs Lisp, однако, не должны взаимодействовать непосредственно с лексической средой таким образом; только
специализированные программы, такие как отладчики.)

Лексическое связывание имеет неопределенную глубину. Даже после завершения выполнения привязки конструктором,
его лексическая среда может быть “kept around” («хранится вокруг»), в Лиспе объектов называются замыканием.
Замыкание  создается при определении имени или анонимной функции с включенным лексическим связыванием.
См Closures, для деталей.

Когда замыкане реализуется как функция, любые  переменные в пределах его определения используют лексические
ccskrb нераспределенной лексической среды. Вот пример:

     (defvar my-ticker nil)   ; Мы будем использовать эту динамически связанную
     	     	       	      ; переменную для хранения замыкания.
     
     (let ((x 0))             ; х лексически связана.
       (setq my-ticker (lambda ()
                         (setq x (1+ x)))))
         ⇒ (closure ((x . 0) t) ()
               (setq x (1+ x)))
     
     (funcall my-ticker)
         ⇒ 1
     
     (funcall my-ticker)
         ⇒ 2
     
     (funcall my-ticker)
         ⇒ 3
     
     x                        ; Обратите внимание, что х не имеет глобального значения.
     error--> Значение на которое указывает символ пусто: x

Связывания определяет лексическую среду, в которой переменная x локально связана с 0 пусть. В этой конструкции
связывания, определим лямбда-выражение, которое приращает единицу к 'x' и возвращает измененное значение.
Это лямбда-выражение автоматически включается в замыкание, в котором лексическая среда живет даже после того, как
связывающая конструкция покинута. Каждый раз, когда мы оцениваем замыкание, это увеличивает x, используя
связывание 'x' в этой лексической среде.

Следует отметить, что в отличие от динамически связанных переменных, которые привязаны к самому объекту символа,
отношения между лексически связанным переменным и символами присутствуют только в интерпретаторе (или компиляторе).
Таким образом, символ связанный с функцией, которая принимают аргумент (удовлетворяют symbol-value, boundp, и set),
может модифицировать и извлекать только динамически связанные переменные (то есть содержимое ячейки значения
своего символа).
*********************************************************************************************************
(eval FORM &optional LEXICAL)

Оценит FORM и возвращает его значение.
Если LEXICAL является t, оценить с помощью лексической области видимости.
LEXICAL также может быть актуальной лексической средой, в виде
ассоциативного списка символов и их значений.