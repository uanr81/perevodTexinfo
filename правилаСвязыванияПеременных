12.10 Обзорные правила для привязки переменной

При создании местной привязки для переменной, что связывание вступает в силу лишь в ограниченной части программы
(см локальные переменные). Этот раздел описывает именно это.

Каждое локальное связывание имеет определенный объем и степень. Область относится к, где в исходном коде
текстовой привязка может быть доступна. Степень относится к тому, когда, как программа выполняется, связывание
существует.

По умолчанию локальные привязки, что создает Emacs динамические привязки. Такое связывание имеет
динамический объем, а это означает, что любая часть программы может потенциально получить доступ к
переменному связыванию. Она также имеет динамическую степень, а это означает, что связывание только длится
в то время как связывающая конструкция (например, тело формы LET) выполняются.

Emacs может дополнительно создавать лексические привязки. Лексическая связывание имеет лексическую область,
а это означает, что любая ссылка на переменную должна быть расположена в пределах текстуально связывания
construct1. Она также имеет неопределенную степень, а это означает, что при некоторых обстоятельствах
связывание может жить даже после завершения конструктором привязки, с помощью специальных объектов, называемых
замыканиями.

Следующие подразделы описывают динамическое связывание и лексические связывание более подробно,
и как включить лексическое связывание в программах Emacs Lisp.

    Динамическое Связывание: По умолчанию для связывания локальных переменных в Emacs.
    Динамическое Связывание Типы: Как избежать проблем с обязательным динамическим связыванием.
    Лексическое Связывание: Другой тип связывания локальной переменной.
    Использование Лексического Связывания: Как включить лексическое связывание.

12.10.1 Dynamic Binding

По умолчанию привязка локальных переменных, сделанные Emacs являются динамической привязкой. Когда переменная
динамически связана, в любой момент выполнения программы на Лисп её текущее связывание использует наиболее
недавно созданное динамическое локальное связывание для этого символа, или глобальное связывание, если
нет таких локальных связываний.

Динамические привязки имеют динамический объем и степень, как показано в следующем примере:

     (defvar x -99)  ; x получает начальное значение −99.
     
     (defun getx ()
       x)            ; x используется свободно в этой функции.
     
     (let ((x 1))    ; x динамически связана с 1.
       (getx))
          ⇒ 1
     
     ;; После того, как форма LET отработала, x возвращается
     к своему предыдущему значению, которое является −99.
     
     (getx)
          ⇒ -99

Функция GetX относится к x. Это свободный справочник, в том смысле, что не существует для связывания х в пределах этой самой DEFUN конструкции. When we call getx from within a let form in which x is (dynamically) bound, it retrieves the local value (i.e., 1). But when we call getx outside the let form, it retrieves the global value (i.e., −99).

Here is another example, which illustrates setting a dynamically bound variable using setq:

     (defvar x -99)      ; x receives an initial value of −99.
     
     (defun addx ()
       (setq x (1+ x)))  ; Add 1 to x and return its new value.
     
     (let ((x 1))
       (addx)
       (addx))
          ⇒ 3           ; The two addx calls add to x twice.
     
     ;; After the let form finishes, x reverts to its
     ;; previous value, which is −99.
     
     (addx)
          ⇒ -98

Dynamic binding is implemented in Emacs Lisp in a simple way. Each symbol has a value cell, which specifies its current dynamic value (or absence of value). See Symbol Components. When a symbol is given a dynamic local binding, Emacs records the contents of the value cell (or absence thereof) in a stack, and stores the new local value in the value cell. When the binding construct finishes executing, Emacs pops the old value off the stack, and puts it in the value cell. 